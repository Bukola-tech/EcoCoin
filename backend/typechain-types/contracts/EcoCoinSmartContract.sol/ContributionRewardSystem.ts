/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ContributionRewardSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "LEVEL1_REWARD"
      | "LEVEL2_REWARD"
      | "LEVEL3_REWARD"
      | "claimCount"
      | "claimRewards"
      | "contributionNFT"
      | "ecoCoin"
      | "getUserBalance"
      | "getUserClaimCount"
      | "getUserLevel"
      | "owner"
      | "rewardedNFTs"
      | "setRewardAmounts"
      | "userLevels"
      | "withdrawTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "RewardAmountUpdated"
      | "RewardClaimed"
      | "UserLevelUpdated"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "LEVEL1_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LEVEL2_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LEVEL3_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contributionNFT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ecoCoin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUserBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserClaimCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLevel",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardedNFTs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardAmounts",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userLevels",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "LEVEL1_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LEVEL2_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LEVEL3_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributionNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ecoCoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserClaimCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardedNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userLevels", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardAmountUpdatedEvent {
  export type InputTuple = [
    level1Reward: BigNumberish,
    level2Reward: BigNumberish,
    level3Reward: BigNumberish
  ];
  export type OutputTuple = [
    level1Reward: bigint,
    level2Reward: bigint,
    level3Reward: bigint
  ];
  export interface OutputObject {
    level1Reward: bigint;
    level2Reward: bigint;
    level3Reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    tokenId: BigNumberish,
    nftLevel: BigNumberish
  ];
  export type OutputTuple = [user: string, tokenId: bigint, nftLevel: bigint];
  export interface OutputObject {
    user: string;
    tokenId: bigint;
    nftLevel: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserLevelUpdatedEvent {
  export type InputTuple = [user: AddressLike, newLevel: BigNumberish];
  export type OutputTuple = [user: string, newLevel: bigint];
  export interface OutputObject {
    user: string;
    newLevel: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ContributionRewardSystem extends BaseContract {
  connect(runner?: ContractRunner | null): ContributionRewardSystem;
  waitForDeployment(): Promise<this>;

  interface: ContributionRewardSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  LEVEL1_REWARD: TypedContractMethod<[], [bigint], "view">;

  LEVEL2_REWARD: TypedContractMethod<[], [bigint], "view">;

  LEVEL3_REWARD: TypedContractMethod<[], [bigint], "view">;

  claimCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  claimRewards: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  contributionNFT: TypedContractMethod<[], [string], "view">;

  ecoCoin: TypedContractMethod<[], [string], "view">;

  getUserBalance: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  getUserClaimCount: TypedContractMethod<
    [_user: AddressLike],
    [bigint],
    "view"
  >;

  getUserLevel: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  rewardedNFTs: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  setRewardAmounts: TypedContractMethod<
    [
      _level1Reward: BigNumberish,
      _level2Reward: BigNumberish,
      _level3Reward: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  userLevels: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  withdrawTokens: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "LEVEL1_REWARD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LEVEL2_REWARD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LEVEL3_REWARD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "contributionNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ecoCoin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getUserBalance"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserClaimCount"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserLevel"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rewardedNFTs"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "setRewardAmounts"
  ): TypedContractMethod<
    [
      _level1Reward: BigNumberish,
      _level2Reward: BigNumberish,
      _level3Reward: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userLevels"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawTokens"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RewardAmountUpdated"
  ): TypedContractEvent<
    RewardAmountUpdatedEvent.InputTuple,
    RewardAmountUpdatedEvent.OutputTuple,
    RewardAmountUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "UserLevelUpdated"
  ): TypedContractEvent<
    UserLevelUpdatedEvent.InputTuple,
    UserLevelUpdatedEvent.OutputTuple,
    UserLevelUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RewardAmountUpdated(uint256,uint256,uint256)": TypedContractEvent<
      RewardAmountUpdatedEvent.InputTuple,
      RewardAmountUpdatedEvent.OutputTuple,
      RewardAmountUpdatedEvent.OutputObject
    >;
    RewardAmountUpdated: TypedContractEvent<
      RewardAmountUpdatedEvent.InputTuple,
      RewardAmountUpdatedEvent.OutputTuple,
      RewardAmountUpdatedEvent.OutputObject
    >;

    "RewardClaimed(address,uint256,uint8)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "UserLevelUpdated(address,uint8)": TypedContractEvent<
      UserLevelUpdatedEvent.InputTuple,
      UserLevelUpdatedEvent.OutputTuple,
      UserLevelUpdatedEvent.OutputObject
    >;
    UserLevelUpdated: TypedContractEvent<
      UserLevelUpdatedEvent.InputTuple,
      UserLevelUpdatedEvent.OutputTuple,
      UserLevelUpdatedEvent.OutputObject
    >;

    "Withdrawn(address,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
